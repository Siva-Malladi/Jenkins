pipeline {
    agent any
    stages {
        stage ("DEPLOY ARGO CD") { 
            steps {
                
                sh """
                
              
                
                set -e  # Stop on unhandled errors

                echo "==== CHECKING NODES IN THE CLUSTER ===="
                kubectl get nodes || true

                echo "==== CREATING ARGOCD NAMESPACE (skip if exists) ===="
                kubectl get namespace argocd >/dev/null 2>&1 || kubectl create namespace argocd

                echo "==== INSTALLING/UPDATING ARGOCD ===="
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

                echo "==== CHANGING SERVICE TYPE TO LOAD BALANCER (skip if already LB) ===="
                current_type=\$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.type}' 2>/dev/null || echo "none")
                if [ "\$current_type" != "LoadBalancer" ] && [ "\$current_type" != "none" ]; then
                    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                else
                    echo "Service type is already LoadBalancer or service not found, skipping patch."
                fi

                echo "==== WAITING FOR ARGOCD SERVER DEPLOYMENT TO BE READY ===="
                kubectl rollout status deployment/argocd-server -n argocd --timeout=180s || true

                echo "==== WAITING FOR LOADBALANCER IP ===="
                for i in {1..30}; do
                    LB_IP=\$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
                    if [ -n "\$LB_IP" ]; then
                        break
                    fi
                    echo "LoadBalancer IP not assigned yet... retrying (\$i/30)"
                    sleep 10
                done

                if [ -z "\$LB_IP" ]; then
                    echo "ERROR: LoadBalancer IP not available after waiting."
                    exit 1
                fi

                echo "==== ARGO CD SERVER IS ACCESSIBLE AT ===="
                echo "https://\$LB_IP"

                echo "==== CLEANING UP OLD PORT-FORWARD PROCESSES ===="
                pkill -f "kubectl port-forward svc/argocd-server -n argocd 8080:443" || true

                echo "==== STARTING NEW PORT-FORWARD IN BACKGROUND ===="
                nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 >/dev/null 2>&1 &
                sleep 5

                echo "==== INSTALLING ARGOCD CLI ===="

               if [ -z "\$(command -v argocd)" ]
                then
                    echo "ArgoCD CLI not found, installing..."
                    
                    VERSION=\$(curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)
                    curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v\$VERSION/argocd-linux-amd64
                    sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
                    rm argocd-linux-amd64
                    
                    echo "ArgoCD CLI installed successfully."
                    argocd version --client
                else
                    echo "ArgoCD CLI already installed, skipping installation."
                    exit 0
                fi
                
                
                echo "==== INSTALLING ARGOCD CLI ===="
                kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode && echo
                echo "==== ARGOCD DEPLOYMENT COMPLETED SUCCESSFULLY ===="
                """
            }
        }
    }
}
